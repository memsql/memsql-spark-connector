{
 "paragraphs": [
  {
   "text": "%md\n## This is a small demo that illustrates the usage of the SingleStore-Spark connector. \n#### It connects to the ciab docker container (https://hub.docker.com/r/memsql/cluster-in-a-box) and runs some basic queries on it.",
   "user": "anonymous",
   "dateUpdated": "2021-02-17 10:41:35.511",
   "progress": 0,
   "config": {
    "colWidth": 12.0,
    "fontSize": 13.0,
    "enabled": true,
    "results": {},
    "editorSetting": {
     "language": "markdown",
     "editOnDblClick": true,
     "completionKey": "TAB",
     "completionSupport": false
    },
    "editorMode": "ace/mode/markdown",
    "editorHide": true,
    "tableHide": false
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "HTML",
      "data": "<div class=\"markdown-body\">\n<h2>This is a small demo that illustrates the usage of the SingleStore-Spark connector.</h2>\n<h4>It connects to the ciab docker container (<a href=\"https://hub.docker.com/r/memsql/cluster-in-a-box\">https://hub.docker.com/r/memsql/cluster-in-a-box</a>) and runs some basic queries on it.</h4>\n\n</div>"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {},
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1587645478876_994795668",
   "id": "paragraph_1587645478876_994795668",
   "dateCreated": "2020-04-23 12:37:58.876",
   "dateStarted": "2021-02-17 10:41:35.514",
   "dateFinished": "2021-02-17 10:41:35.534",
   "status": "FINISHED"
  },
  {
   "title": "Configure Spark",
   "text": "%spark.conf\n\n// Comma-separated list of Maven coordinates of jars to include on the driver and executor classpaths\nspark.jars.packages com.singlestore:singlestore-spark-connector_2.11:3.0.8-spark-2.4.4\n\n// Hostname or IP address of the SingleStore Master Aggregator in the format host[:port] (port is optional). \n// singlestore-ciab-for-zeppelin - hostname of the docker created by https://hub.docker.com/r/memsql/cluster-in-a-box\n// 3306 - port on which SingleStore Master Aggregator is started\nspark.datasource.singlestore.ddlEndpoint singlestore-ciab-for-zeppelin:3306\n\n// Hostname or IP address of SingleStore Aggregator nodes to run queries against in the format host[:port],host[:port],...\n// (port is optional, multiple hosts separated by comma) (default: ddlEndpoint)\n// Example\n// spark.datasource.singlestore.dmlEndpoints child-agg:3308,child-agg2\nspark.datasource.singlestore.dmlEndpoints singlestore-ciab-for-zeppelin:3306\n\n// SingleStore username (default: root)\nspark.datasource.singlestore.user root\n\n// SingleStore password (default: no password)\nspark.datasource.singlestore.password password\n\n// If set, all connections will default to using this database (default: empty)\n// Example\n// spark.datasource.singlestore.database demoDB\nspark.datasource.singlestore.database\n\n// Disable SQL Pushdown when running queries (default: false)\nspark.datasource.singlestore.disablePushdown false\n\n// Enable reading data in parallel for some query shapes (default: false)\nspark.datasource.singlestore.enableParallelRead false\n\n// Truncate instead of drop an existing table during Overwrite (default: false)\nspark.datasource.singlestore.truncate false\n\n// Compress data on load; one of (GZip, LZ4, Skip) (default: GZip)\nspark.datasource.singlestore.loadDataCompression GZip\n\n// Specify additional keys to add to tables created by the connector\n// Examples\n// * A primary key on the id column\n// spark.datasource.singlestore.tableKey.primary id\n// * A regular key on the columns created, firstname with the key name created_firstname\n// spark.datasource.singlestore.tableKey.key.created_firstname created, firstName\n// * A unique key on the username column\n// spark.datasource.singlestore.tableKey.unique username\nspark.datasource.singlestore.tableKey",
   "user": "anonymous",
   "dateUpdated": "2021-02-17 10:41:35.614",
   "progress": 0,
   "config": {
    "colWidth": 12.0,
    "fontSize": 13.0,
    "enabled": true,
    "results": {},
    "editorSetting": {
     "language": "text",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "editorMode": "ace/mode/text",
    "title": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": []
   },
   "apps": [],
   "runtimeInfos": {},
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1587645537976_1278581633",
   "id": "paragraph_1587645537976_1278581633",
   "dateCreated": "2020-04-23 12:38:57.976",
   "dateStarted": "2021-02-17 10:41:35.617",
   "dateFinished": "2021-02-17 10:41:35.620",
   "status": "FINISHED"
  },
  {
   "title": "Create a database and table using JDBC",
   "text": "import java.sql.{Connection, DriverManager}\nimport java.util.{Properties, TimeZone}\n\nval connProperties = new Properties()\nconnProperties.put(\"user\", \"root\")\nconnProperties.put(\"password\", \"password\")\n\nval conn = DriverManager.getConnection(\n        s\"jdbc:mysql://singlestore-ciab-for-zeppelin\",\n        connProperties\n      )\n\nval statement = conn.createStatement()\nstatement.execute(\"create database if not exists demoDB\")\nstatement.execute(\"create table if not exists demoDB.people (id int, name varchar(10), age int, country varchar(10))\")\nstatement.close()\nconn.close()",
   "user": "anonymous",
   "dateUpdated": "2021-02-17 10:41:35.716",
   "progress": 0,
   "config": {
    "colWidth": 6.0,
    "fontSize": 13.0,
    "enabled": true,
    "results": {},
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "editorMode": "ace/mode/scala",
    "title": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "import java.sql.{Connection, DriverManager}\nimport java.util.{Properties, TimeZone}\n\u001b[1m\u001b[34mconnProperties\u001b[0m: \u001b[1m\u001b[32mjava.util.Properties\u001b[0m = {user=root, password=password}\n\u001b[1m\u001b[34mconn\u001b[0m: \u001b[1m\u001b[32mjava.sql.Connection\u001b[0m = org.mariadb.jdbc.MariaDbConnection@57910ee5\n\u001b[1m\u001b[34mstatement\u001b[0m: \u001b[1m\u001b[32mjava.sql.Statement\u001b[0m = org.mariadb.jdbc.MariaDbStatement@4c1cb945\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {},
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1587645590204_-1422944272",
   "id": "paragraph_1587645590204_-1422944272",
   "dateCreated": "2020-04-23 12:39:50.204",
   "dateStarted": "2021-02-17 10:41:35.719",
   "dateFinished": "2021-02-17 10:41:52.367",
   "status": "FINISHED"
  },
  {
   "title": "Insert data to the table",
   "text": "import org.apache.spark.sql.{SaveMode}\n\nval people1 = spark.createDataFrame(Seq(\n    (1, \"andy\", 5, \"USA\"), \n    (2, \"jeff\", 23, \"China\"), \n    (3, \"james\", 62, \"USA\"),\n    (4, \"clara\", 82, \"USA\"),\n    (5, \"emmy\", 9, \"Canada\")\n    )).toDF(\"id\", \"name\", \"age\", \"country\")\npeople1.show()\n\npeople1.write\n    .format(\"singlestore\")\n    .mode(SaveMode.Overwrite) // recreate table if it exists\n    .save(\"demoDB.people\") // write to table `people` in database `demoDB`\n",
   "user": "anonymous",
   "dateUpdated": "2021-02-17 10:41:52.435",
   "progress": 0,
   "config": {
    "colWidth": 6.0,
    "fontSize": 13.0,
    "enabled": true,
    "results": {},
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "editorMode": "ace/mode/scala",
    "title": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "+---+-----+---+-------+\n| id| name|age|country|\n+---+-----+---+-------+\n|  1| andy|  5|    USA|\n|  2| jeff| 23|  China|\n|  3|james| 62|    USA|\n|  4|clara| 82|    USA|\n|  5| emmy|  9| Canada|\n+---+-----+---+-------+\n\nimport org.apache.spark.sql.SaveMode\n\u001b[1m\u001b[34mpeople1\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id: int, name: string ... 2 more fields]\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://199765aa5b67:4040/jobs/job?id=0"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1587646718045_-758896661",
   "id": "paragraph_1587646718045_-758896661",
   "dateCreated": "2020-04-23 12:58:38.045",
   "dateStarted": "2021-02-17 10:41:52.436",
   "dateFinished": "2021-02-17 10:41:56.737",
   "status": "FINISHED"
  },
  {
   "title": "Create a Spark SQL table backed by a SingleStore table",
   "text": "%sql\nCREATE DATABASE IF NOT EXISTS demoDB;\nCREATE TABLE IF NOT EXISTS demoDB.people USING singlestore OPTIONS ('dbtable'='demoDB.people');",
   "user": "anonymous",
   "dateUpdated": "2021-02-17 10:41:56.743",
   "progress": 0,
   "config": {
    "colWidth": 6.0,
    "fontSize": 13.0,
    "enabled": true,
    "results": {},
    "editorSetting": {
     "language": "sql",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "editorMode": "ace/mode/sql",
    "title": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": []
   },
   "apps": [],
   "runtimeInfos": {},
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1587645780167_-228404075",
   "id": "paragraph_1587645780167_-228404075",
   "dateCreated": "2020-04-23 12:43:00.167",
   "dateStarted": "2021-02-17 10:41:56.746",
   "dateFinished": "2021-02-17 10:41:56.889",
   "status": "FINISHED"
  },
  {
   "title": "Run a raw Spark SQL query over a Spark SQL table",
   "text": "%sql\nSELECT * FROM demoDB.people;\nSELECT * FROM demoDB.people WHERE people.age < 10;\nSELECT country, MAX(age) FROM demoDB.people GROUP BY country;",
   "user": "anonymous",
   "dateUpdated": "2021-02-17 10:41:56.946",
   "progress": 100,
   "config": {
    "colWidth": 6.0,
    "fontSize": 13.0,
    "enabled": true,
    "results": {
     "0": {
      "graph": {
       "mode": "table",
       "height": 300.0,
       "optionOpen": false,
       "setting": {
        "table": {
         "tableGridState": {},
         "tableColumnTypeState": {
          "names": {
           "id": "string",
           "name": "string",
           "age": "string",
           "country": "string"
          },
          "updated": false
         },
         "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
         "tableOptionValue": {
          "useFilter": false,
          "showPagination": false,
          "showAggregationFooter": false
         },
         "updated": false,
         "initialized": false
        }
       },
       "commonSetting": {}
      }
     },
     "1": {
      "graph": {
       "mode": "table",
       "height": 300.0,
       "optionOpen": false,
       "setting": {
        "table": {
         "tableGridState": {},
         "tableColumnTypeState": {
          "names": {
           "id": "string",
           "name": "string",
           "age": "string",
           "country": "string"
          },
          "updated": false
         },
         "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
         "tableOptionValue": {
          "useFilter": false,
          "showPagination": false,
          "showAggregationFooter": false
         },
         "updated": false,
         "initialized": false
        }
       },
       "commonSetting": {}
      }
     },
     "2": {
      "graph": {
       "mode": "table",
       "height": 300.0,
       "optionOpen": false,
       "setting": {
        "table": {
         "tableGridState": {},
         "tableColumnTypeState": {
          "names": {
           "country": "string",
           "max(age)": "string"
          },
          "updated": false
         },
         "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
         "tableOptionValue": {
          "useFilter": false,
          "showPagination": false,
          "showAggregationFooter": false
         },
         "updated": false,
         "initialized": false
        }
       },
       "commonSetting": {}
      }
     }
    },
    "editorSetting": {
     "language": "sql",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "editorMode": "ace/mode/sql",
    "title": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TABLE",
      "data": "id\tname\tage\tcountry\n3\tjames\t62\tUSA\n1\tandy\t5\tUSA\n2\tjeff\t23\tChina\n5\temmy\t9\tCanada\n4\tclara\t82\tUSA\n"
     },
     {
      "type": "TABLE",
      "data": "id\tname\tage\tcountry\n1\tandy\t5\tUSA\n5\temmy\t9\tCanada\n"
     },
     {
      "type": "TABLE",
      "data": "country\tmax(age)\nChina\t23\nCanada\t9\nUSA\t82\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://199765aa5b67:4040/jobs/job?id=1"
      },
      {
       "jobUrl": "http://199765aa5b67:4040/jobs/job?id=2"
      },
      {
       "jobUrl": "http://199765aa5b67:4040/jobs/job?id=3"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1587646114445_960936248",
   "id": "paragraph_1587646114445_960936248",
   "dateCreated": "2020-04-23 12:48:34.446",
   "dateStarted": "2021-02-17 10:41:56.949",
   "dateFinished": "2021-02-17 10:41:58.661",
   "status": "FINISHED"
  }
 ],
 "name": "spark-sql-singlestore-demo",
 "id": "2F7PZ81H6",
 "defaultInterpreterGroup": "spark",
 "version": "0.9.0-preview1",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false
 },
 "info": {
  "isRunning": false
 }
}